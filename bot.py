# –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞:
# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ 'app = web.Application(client_max_size=1024**2 * 10)'.
# –û–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ 10 –º–µ–≥–∞–±–∞–π—Ç,
# —á—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "Content Too Large".

import asyncio
import logging
import os
import aiohttp
from aiohttp import web
import asyncio
import logging
import os
import re
import signal
from typing import Optional
from urllib.parse import unquote

import aiohttp
from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
RAW_GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')


def _sanitize_gemini_key(raw_key: Optional[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π API-–∫–ª—é—á –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω–æ."""
    if not raw_key:
        return ""

    raw_key = raw_key.strip()

    decoded_key = unquote(raw_key)

    candidates = []
    for value in (raw_key, decoded_key):
        if value and value not in candidates:
            candidates.append(value)

    for candidate in candidates:
        match = re.search(r"AIza[0-9A-Za-z_\-]{30,}", candidate)
        if match:
            cleaned_key = match.group(0)
            if cleaned_key != raw_key:
                logging.warning(
                    "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GEMINI_API_KEY —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∫–ª—é—á: %s...",
                    cleaned_key[:8],
                )
            return cleaned_key

    return raw_key


GEMINI_API_KEY = _sanitize_gemini_key(RAW_GEMINI_API_KEY)
PORT = os.getenv('PORT', '8080') 

logging.basicConfig(level=logging.INFO)

if not all([BOT_TOKEN, WEB_APP_URL, GEMINI_API_KEY]):
    logging.critical("!!! –û–®–ò–ë–ö–ê: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (BOT_TOKEN, WEB_APP_URL, GEMINI_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢ ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    web_app_button = InlineKeyboardButton(text="‚ú® –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", reply_markup=keyboard)

# --- –ü–†–û–ö–°–ò-–°–ï–†–í–ï–† ---
async def proxy_handler(request):
    headers = {"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Methods": "POST, OPTIONS", "Access-Control-Allow-Headers": "Content-Type"}
    if request.method == 'OPTIONS':
        return web.Response(headers=headers)
    try:
        data = await request.json()
        target_api = data.get('target_api')
        payload = data.get('payload')

        if target_api == 'image':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=){GEMINI_API_KEY}"
        elif target_api == 'text':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=){GEMINI_API_KEY}"
        if target_api == 'image':
            api_url = (
                "https://generativelanguage.googleapis.com/v1beta/models/"
                "gemini-2.5-flash-image-preview:generateContent"
                f"?key={GEMINI_API_KEY}"
            )
        elif target_api == 'text':
            api_url = (
                "https://generativelanguage.googleapis.com/v1beta/models/"
                "gemini-2.5-flash-preview-05-20:generateContent"
                f"?key={GEMINI_API_KEY}"
            )
        else:
            return web.json_response({"error": {"message": "Invalid target_api"}}, status=400, headers=headers)

        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload) as resp:
                return web.json_response(await resp.json(), status=resp.status, headers=headers)
    except Exception as e:
        logging.error(f"Proxy error: {e}")
        return web.json_response({"error": {"message": str(e)}}, status=500, headers=headers)

# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê ---
async def start_bot_polling():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def start_web_server():
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ 10MB
    app = web.Application(client_max_size=1024**2 * 10)
    app.router.add_route('*', '/api/proxy', proxy_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(PORT))
    await site.start()
    logging.info(f"--> –í–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø—Ä–æ–∫—Å–∏) –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await asyncio.Event().wait()

async def main():
    await asyncio.gather(start_bot_polling(), start_web_server())
async def start_bot_polling():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞...")
        raise
    finally:
        await bot.session.close()

async def start_web_server(stop_event: asyncio.Event):
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ 10MB
    app = web.Application(client_max_size=1024**2 * 10)
    app.router.add_route('*', '/api/proxy', proxy_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(PORT))
    await site.start()
    logging.info(f"--> –í–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø—Ä–æ–∫—Å–∏) –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    try:
        await stop_event.wait()
    finally:
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–æ–∫—Å–∏)...")
        await runner.cleanup()

async def main():
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    def _handle_shutdown(sig: signal.Signals):
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig.name}. –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, _handle_shutdown, sig)
        except NotImplementedError:
            # –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Windows) –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logging.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")

    bot_task = asyncio.create_task(start_bot_polling())
    web_task = asyncio.create_task(start_web_server(stop_event))

    await stop_event.wait()

    for task in (bot_task, web_task):
        task.cancel()

    await asyncio.gather(bot_task, web_task, return_exceptions=True)
    logging.info("–°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
