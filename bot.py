# –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞:
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–ª–∞–µ—Ç –¥–≤–µ –≤–µ—â–∏:
# 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.
# 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø—Ä–æ–∫—Å–∏), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞,
#    –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π API-–∫–ª—é—á –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Google,
#    —Ä–µ—à–∞—è –ø—Ä–æ–±–ª–µ–º—É —Å –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.

import asyncio
import logging
import os
import aiohttp
from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
# os.getenv() - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ—Ç "—Å–µ–∫—Ä–µ—Ç—ã"
# (—Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏) –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Replit, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—è –∏—Ö –≤ –∫–æ–¥–µ.
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
# Replit –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
PORT = os.getenv('PORT', '8080') 

logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç—Ä–∏ —Å–µ–∫—Ä–µ—Ç–∞ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
if not all([BOT_TOKEN, WEB_APP_URL, GEMINI_API_KEY]):
    logging.critical("!!! –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—Ä–µ—Ç–æ–≤ (BOT_TOKEN, WEB_APP_URL, GEMINI_API_KEY) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Secrets' –Ω–∞ Replit –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢ ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /start
    web_app_button = InlineKeyboardButton(text="‚ú® –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É", web_app=WebAppInfo(url=WEB_APP_URL))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", reply_markup=keyboard)

# --- –ü–†–û–ö–°–ò-–°–ï–†–í–ï–† ---
async def proxy_handler(request):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
    headers = {"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Methods": "POST, OPTIONS", "Access-Control-Allow-Headers": "Content-Type"}
    if request.method == 'OPTIONS':
        return web.Response(headers=headers)
    try:
        data = await request.json()
        target_api = data.get('target_api')
        payload = data.get('payload')

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞, –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π URL API Google
        if target_api == 'image':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=){GEMINI_API_KEY}"
        elif target_api == 'text':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=){GEMINI_API_KEY}"
        else:
            return web.json_response({"error": {"message": "Invalid target_api"}}, status=400, headers=headers)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Google –æ—Ç –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload) as resp:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Google –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∞–π—Ç
                return web.json_response(await resp.json(), status=resp.status, headers=headers)
    except Exception as e:
        logging.error(f"Proxy error: {e}")
        return web.json_response({"error": {"message": str(e)}}, status=500, headers=headers)

# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê ---
async def start_bot_polling():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def start_web_server():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    app.router.add_route('*', '/api/proxy', proxy_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(PORT))
    await site.start()
    logging.info(f"--> –í–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø—Ä–æ–∫—Å–∏) –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await asyncio.Event().wait()

async def main():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–µ –∑–∞–¥–∞—á–∏ (–±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä) –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(start_bot_polling(), start_web_server())

if __name__ == "__main__":
    asyncio.run(main())
