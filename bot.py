import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')
# -----------------

logging.basicConfig(level=logging.INFO)

if not BOT_TOKEN:
    logging.critical("!!! –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if not WEB_APP_URL:
        await message.answer("–û—à–∏–±–∫–∞: WEB_APP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    web_app_button = InlineKeyboardButton(
        text="‚ú® –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É",
        web_app=WebAppInfo(url=WEB_APP_URL)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å—Ç–∏–ª–∏—Å—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–∏–º–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"
    )
    await message.answer(welcome_text, reply_markup=keyboard)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
