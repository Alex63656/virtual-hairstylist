import os
import base64
import io
import google.generativeai as genai
import telebot
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)
CORS(app, origins=["*"], methods=["GET", "POST", "OPTIONS"], allow_headers=["Content-Type", "Authorization"])

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot ---
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7854606797:AAFKsvnC8wNC56jX7SX7-suRCs85hBMQyuY')
WEBAPP_URL = os.environ.get('WEBAPP_URL', 'https://virtual-hairstylist-production.up.railway.app')

bot = None
if BOT_TOKEN:
    try:
        bot = telebot.TeleBot(BOT_TOKEN)
        
        @bot.message_handler(commands=['start'])
        def start_handler(message):
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            webapp_button = KeyboardButton(
                text="‚ú® –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É",
                web_app=WebAppInfo(url=f"{WEBAPP_URL}/")
            )
            keyboard.add(webapp_button)
            
            bot.send_message(
                message.chat.id, 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏—á–µ—Å–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò! üíá‚Äç‚ôÄÔ∏è\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
                reply_markup=keyboard
            )
        
        print(f"‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot: {e}")
        bot = None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API ---
try:
    # API –∫–ª—é—á –≤–ø–∏—Å–∞–Ω –≤ –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é.
    api_key = "AIzaSyCX-D5d5kXJrmyMZJREykCQAbx-bXqVCIk"
    
    genai.configure(api_key=api_key)
    
    # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. 
    image_generation_model = genai.GenerativeModel('gemini-2.5-flash-image')
    print("‚úÖ Gemini API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

except Exception as e:
    # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
    app.logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {e}")
    image_generation_model = None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def base64_to_pil(base64_string: str) -> Image.Image:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç PIL.Image –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º padding, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Ç–µ—Ä—è–Ω –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ
    missing_padding = len(base64_string) % 4
    if missing_padding:
        base64_string += '=' * (4 - missing_padding)
    
    try:
        image_data = base64.b64decode(base64_string)
        image = Image.open(io.BytesIO(image_data))
        return image
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")


# --- –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
@app.route('/')
def serve_webapp():
    """–†–∞–∑–¥–∞—á–∞ HTML –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        with open('virtual_hairstylist_bot_ru.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "ok", 
        "message": "–°–µ—Ä–≤–µ—Ä AI –°—Ç–∏–ª–∏—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "bot_status": "active" if bot else "inactive",
        "gemini_status": "active" if image_generation_model else "inactive"
    })

@app.route('/setup_webhook')
def setup_webhook_route():
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    if bot and BOT_TOKEN:
        try:
            webhook_url = f"{WEBAPP_URL}/telegram_webhook"
            result = bot.set_webhook(url=webhook_url)
            return jsonify({
                "success": result,
                "webhook_url": webhook_url,
                "message": "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" if result else "–û—à–∏–±–∫–∞ webhook"
            })
        except Exception as e:
            return jsonify({"error": str(e)})
    return jsonify({"error": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})

@app.route('/test_webhook_route')
def test_webhook_route():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç webhook"""
    webhook_path = '/telegram_webhook'
    return jsonify({
        "webhook_path": webhook_path,
        "full_url": f"{WEBAPP_URL}{webhook_path}",
        "bot_token_exists": BOT_TOKEN is not None,
        "message": "–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞ webhook"
    })

# --- Telegram Webhook ---
@app.route('/telegram_webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    print(f"üî• WEBHOOK –ü–û–õ–£–ß–ï–ù! –î–∞–Ω–Ω—ã–µ: {request.get_data()}")
    
    if bot:
        try:
            json_string = request.get_data().decode('utf-8')
            print(f"üìù JSON: {json_string}")
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return "OK"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            app.logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
            return "ERROR", 500
    
    print("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return "Bot not initialized", 400

# --- API –º–∞—Ä—à—Ä—É—Ç—ã ---

# –ù–û–í–´–ô –ú–ê–†–®–†–£–¢: /api/proxy - —ç—Ç–æ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!
@app.route('/api/proxy', methods=['POST', 'OPTIONS'], strict_slashes=False)
def handle_proxy():
    """–ü—Ä–æ–∫—Å–∏ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CORS preflight –∑–∞–ø—Ä–æ—Å—ã
    if request.method == 'OPTIONS':
        return '', 200
    
    if not request.is_json:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON."}), 400

    data = request.get_json()
    target_api = data.get('target_api')
    payload = data.get('payload')
    
    if not target_api or not payload:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: target_api –∏ payload."}), 400
    
    try:
        if target_api == 'image':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            contents = payload.get('contents', [])
            if not contents:
                return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."}), 400
            
            parts = contents[0].get('parts', [])
            if not parts:
                return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–∞—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."}), 400
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini
            prompt_text = ""
            images = []
            
            for part in parts:
                if 'text' in part:
                    prompt_text += part['text'] + " "
                elif 'inlineData' in part:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º base64 –≤ PIL Image
                    image_b64 = part['inlineData']['data']
                    image_pil = base64_to_pil(image_b64)
                    images.append(image_pil)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ü–†–ê–í–ò–õ–¨–ù–û - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏!
            gemini_parts = []
            if prompt_text.strip():
                gemini_parts.append(prompt_text.strip())  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ü–ï–†–í–´–ú!
            
            for img in images:
                gemini_parts.append(img)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ü–û–°–õ–ï —Ç–µ–∫—Å—Ç–∞!
            
            # –í—ã–∑–æ–≤ Gemini API
            if not image_generation_model:
                return jsonify({"error": "–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."}), 500
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
            response = image_generation_model.generate_content(gemini_parts)
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ
            generated_image_b64 = None
            
            # –°–ø–æ—Å–æ–± 1: –í response.parts
            if hasattr(response, 'parts'):
                for part in response.parts:
                    if hasattr(part, 'mime_type') and part.mime_type and part.mime_type.startswith('image/'):
                        img_bytes = part.inline_data.data
                        generated_image_b64 = base64.b64encode(img_bytes).decode('utf-8')
                        break
            
            # –°–ø–æ—Å–æ–± 2: –í candidates (–µ—Å–ª–∏ –≤ —Å–ø–æ—Å–æ–±–µ 1 –Ω–µ –Ω–∞—à–ª–∏)
            if not generated_image_b64 and hasattr(response, 'candidates'):
                for candidate in response.candidates:
                    if hasattr(candidate, 'content') and hasattr(candidate.content, 'parts'):
                        for part in candidate.content.parts:
                            if hasattr(part, 'inline_data') and part.inline_data:
                                img_bytes = part.inline_data.data
                                generated_image_b64 = base64.b64encode(img_bytes).decode('utf-8')
                                break
                        if generated_image_b64:
                            break
            
            if not generated_image_b64:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                app.logger.error(f"Gemini –æ—Ç–≤–µ—Ç: {response}")
                raise ValueError("AI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            return jsonify({
                "candidates": [{
                    "content": {
                        "parts": [{
                            "inlineData": {
                                "data": generated_image_b64,
                                "mimeType": "image/png"
                            }
                        }]
                    }
                }]
            })
            
        elif target_api == 'text':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            contents = payload.get('contents', {})
            config = payload.get('config', {})
            
            parts = contents.get('parts', [])
            system_instruction = config.get('systemInstruction')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            user_prompt = ""
            image_pil = None
            
            for part in parts:
                if 'text' in part:
                    user_prompt = part['text']
                elif 'inlineData' in part:
                    image_b64 = part['inlineData']['data']
                    image_pil = base64_to_pil(image_b64)
            
            if not user_prompt or not image_pil:
                return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}), 400
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            text_vision_model = genai.GenerativeModel(
                'gemini-2.5-flash',
                system_instruction=system_instruction if system_instruction else None
            )
            
            response = text_vision_model.generate_content([user_prompt, image_pil])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            return jsonify({
                "candidates": [{
                    "content": {
                        "parts": [{
                            "text": response.text
                        }]
                    }
                }]
            })
            
        else:
            return jsonify({"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API: {target_api}"}), 400
            
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route('/api/generate', methods=['POST'], strict_slashes=False)
def handle_generate():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏—á–µ—Å–∫–∏.
    strict_slashes=False –¥–µ–ª–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫ –Ω–∞–ª–∏—á–∏—é / –≤ –∫–æ–Ω—Ü–µ URL.
    """
    if not image_generation_model:
        return jsonify({"error": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."}), 500

    if not request.is_json:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON."}), 400

    data = request.get_json()
    client_photo_b64 = data.get('clientPhotoBase64')
    prompt = data.get('prompt')
    style_photo_b64 = data.get('stylePhotoBase64')

    if not client_photo_b64 or not prompt:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: clientPhotoBase64 –∏ prompt."}), 400

    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏!
        parts = []
        parts.append(prompt)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ü–ï–†–í–´–ú!
        
        client_photo_pil = base64_to_pil(client_photo_b64)
        parts.append(client_photo_pil)
        
        if style_photo_b64:
            style_photo_pil = base64_to_pil(style_photo_b64)
            parts.append(style_photo_pil)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
        response = image_generation_model.generate_content(parts)

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ
        generated_image_b64 = None
        
        # –°–ø–æ—Å–æ–± 1: –í response.parts
        if hasattr(response, 'parts'):
            for part in response.parts:
                if hasattr(part, 'mime_type') and part.mime_type and part.mime_type.startswith('image/'):
                    img_bytes = part.inline_data.data
                    generated_image_b64 = base64.b64encode(img_bytes).decode('utf-8')
                    break
        
        # –°–ø–æ—Å–æ–± 2: –í candidates (–µ—Å–ª–∏ –≤ —Å–ø–æ—Å–æ–±–µ 1 –Ω–µ –Ω–∞—à–ª–∏)
        if not generated_image_b64 and hasattr(response, 'candidates'):
            for candidate in response.candidates:
                if hasattr(candidate, 'content') and hasattr(candidate.content, 'parts'):
                    for part in candidate.content.parts:
                        if hasattr(part, 'inline_data') and part.inline_data:
                            img_bytes = part.inline_data.data
                            generated_image_b64 = base64.b64encode(img_bytes).decode('utf-8')
                            break
                    if generated_image_b64:
                        break
        
        if not generated_image_b64:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            app.logger.error(f"Gemini –æ—Ç–≤–µ—Ç: {response}")
            raise ValueError("AI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–æ—Ç–æ.")

        return jsonify({"base64Image": generated_image_b64})

    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"}), 500


@app.route('/api/analyze', methods=['POST'], strict_slashes=False)
def handle_analyze():
    """
    –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–µ).
    """
    if not request.is_json:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON."}), 400

    data = request.get_json()
    system_prompt = data.get('systemPrompt')
    user_prompt = data.get('userPrompt')
    image_b64 = data.get('imageBase64')

    if not image_b64 or not user_prompt:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: imageBase64 –∏ userPrompt."}), 400

    try:
        image_pil = base64_to_pil(image_b64)
        
        # –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞.
        text_vision_model = genai.GenerativeModel(
            'gemini-2.5-flash',
            system_instruction=system_prompt if system_prompt else None
        )

        response = text_vision_model.generate_content([user_prompt, image_pil])

        return jsonify({"text": response.text})

    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"}), 500

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    # –≠—Ç–∞ —á–∞—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (python bot.py).
    # –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gunicorn –∏–∑ Procfile.
    port = int(os.environ.get('PORT', 8080))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
