import asyncio
import logging
import os
import aiohttp
from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
# Bothost –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8080
PORT = os.getenv('PORT', '8080') 

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(level=logging.INFO)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–õ–ï–ì–†–ê–ú ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    web_app_button = InlineKeyboardButton(
        text="‚ú® –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∏—á–µ—Å–∫—É",
        web_app=WebAppInfo(url=WEB_APP_URL)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å—Ç–∏–ª–∏—Å—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–∏–º–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"
    )
    await message.answer(welcome_text, reply_markup=keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–ö–°–ò-–°–ï–†–í–ï–†–ê ---
async def proxy_handler(request):
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
    headers = {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type",
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–∞ OPTIONS –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
    if request.method == 'OPTIONS':
        return web.Response(headers=headers)

    try:
        data = await request.json()
        target_api = data.get('target_api')
        payload = data.get('payload')

        if not target_api or not payload:
            return web.Response(status=400, text="Missing target_api or payload", headers=headers)

        if target_api == 'image':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=){GEMINI_API_KEY}"
        elif target_api == 'text':
            api_url = f"[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=){GEMINI_API_KEY}"
        else:
            return web.Response(status=400, text="Invalid target_api specified", headers=headers)

        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload) as resp:
                response_text = await resp.text()
                return web.Response(status=resp.status, text=response_text, content_type='application/json', headers=headers)

    except Exception as e:
        logging.error(f"Proxy error: {e}")
        return web.Response(status=500, text=str(e), headers=headers)

# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê ---
async def start_bot_polling():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def start_web_server():
    app = web.Application()
    app.router.add_route('*', '/api/proxy', proxy_handler) # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏ POST, –∏ OPTIONS
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(PORT))
    await site.start()
    logging.info(f"Web server started on port {PORT}")
    while True:
        await asyncio.sleep(3600) 

async def main():
    await asyncio.gather(
        start_bot_polling(),
        start_web_server()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")
